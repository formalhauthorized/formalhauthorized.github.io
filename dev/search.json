



{"search" : [
  {
    "url" : "/sections/dev/posts/rust/start/",
    "title" : "start-rust",
    "text" : "start rust undefined this section about rust #start #begin #basics #rust",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/solana/basics/start/",
    "title" : "start-solana",
    "text" : "start solana undefined this section about solana basics #start #begin #basics #solana",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/solidity/basics/start/",
    "title" : "start-solidity",
    "text" : "start solidity undefined this section about solidity basics #solidity #start",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/rust/wasm-tutorial/",
    "title" : "wasm tutorial game of life",
    "text" : "wasm tutorial game life undefined this based tutorial: life game life wrapper { top: 0; left: width: 100%; height: display: flex; flex direction: column; align items: center; justify content: } import init { universe cell } from &#39; /wasm_game_of_lifejs&#39;; async function run() const cell_size = 5; // px grid_color &quot;#cccccc&quot;; dead_color &quot;#ffffff&quot;; alive_color &quot;#000000&quot;; await init(); memory wasmmemory; consolelog(wasm); // construct get its width height const universe universenew(); const universewidth(); const height universeheight(); const canvas documentgetelementbyid(&quot;game life canvas&quot;); canvasheight (cell_size + 1) * 1; canvaswidth 1; const ctx canvasgetcontext(&#39;2d&#39;) const getindex (row column) =&gt; return row column; }; drawgrid () ctxbeginpath(); ctxstrokestyle grid_color; vertical lines (let 0; &lt;= width; ++) ctxmoveto( 1 0); ctxlineto( 1); } horizontal j height; j++) ctxmoveto(0 ctxlineto((cell_size ctxstroke(); }; const drawcells cellsptr universecells(); cells new uint8array(memorybuffer cellsptr height); ctxbeginpath(); &lt; row++) col col++) idx getindex(row col); ctxfillstyle cells[idx] === celldead dead_color : alive_color; ctxfillrect( 1 cell_size cell_size ); } ctxstroke(); }; renderloop universetick(); drawgrid(); drawcells(); requestanimationframe(renderloop); }; drawgrid(); drawcells(); requestanimationframe(renderloop); run(); #rust #wasm #tutorial",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/docker/clear-cache/",
    "title" : "clear cache docker",
    "text" : "clear cache docker undefined storage from docker docker disk usage docker system df prune images docker image prune remove build cache docker buildx everything docker prune reference this post meant personal quick cheat sheet more detailed explanation examples: post #docker #cache",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/antora/quickstart/",
    "title" : "quick start antora",
    "text" : "quick start antora undefined environment ease setting using docker container good start dockerfile below example environment # syntax=docker/dockerfile:16 #################################################### ### args #################################################### arg variant=&amp;quot;trixie&amp;quot; #################################################### ### base #################################################### # [choice] debian version (use bullseye local arm64/apple silicon): bookworm bullseye buster from debian:${variant} base image run apt get update &amp;amp;&amp;amp; export debian_frontend=noninteractive &#92; y install install recommends curl ca certificates gnupg bash completion git jq python3 pip python3 venv sudo unzip wget vim tmux tree ssh rm rf /var/lib/apt/lists/* #################################################### ### user #################################################### from base image toolbox # add user with passwordless sudo arg username=dev run useradd m &amp;quot;${username}&amp;quot; usermod ag echo &amp;quot;${username} all=(all) nopasswd: all&amp;quot; &amp;gt;&amp;gt; /etc/sudoers ##### user level setup follows ##### things should installed $home from now user &amp;quot;${username}&amp;quot; workdir /home/&amp;quot;${username}&amp;quot; env home=&amp;quot;/home/${username}&amp;quot; env path=&amp;quot;${path}:${home}/ local/bin&amp;quot; # nvm # inspired by https://rawgithubusercontentcom/devcontainers/features/main/src/node/installsh run o https://rawgithubusercontentcom/nvm sh/nvm/v0401/installsh | bash env nvm_dir=&amp;quot;${home}/ nvm&amp;quot; # node get node version path global npm packages run &amp;quot;$nvm_dir/nvmsh&amp;quot; nvm lts alias default lts/* use node_version=$(node version) # &amp;quot;path=&#92;&amp;quot;${home}/ nvm/versions/node/$node_version/bin:${path}&#92;&amp;quot;&amp;quot; &amp;quot;${home}/ bashrc&amp;quot; omit=dev global force pnpm yarn g yarn ### antora: https://docsantoraorg/antora/latest/install run quickstart/ run 22 put code into build t run run p 3000:3000 antora_101 bash note port mapped 3000 3000 note that have ~/ nvm/nvmsh npm maybe put ~/ bashrc might idea reference detailed tutorial see references: antora docs make package mkdir docs site cd docs site node e &amp;quot;fswritefilesync(&#39;packagejson&#39; &#39;{}&#39;)&amp;quot; d antora npx v playbook source git initialize docs site git init git commit allow empty init putting some docs mkdir modules/root/pages modules/root/pages/indexadoc = welcome! are home modules/root/pages/new pageadoc = new page &#39;ve found page modules/root/navadoc * xref:new pageadoc[] antorayml name: project name version: ~ title: project name nav: modules/root/navadoc site: title: docs site start_page: project name::indexadoc content: sources: url: branches: head ui: bundle: https://gitlabcom/antora/antora ui default/ /jobs/artifacts/head/raw/build/ui bundlezip job=bundle stable snapshot: true build: npx antora playbookyml serve serve build/site following command default will 3000 can access your browser localhost:3000 npx build/site want specify ( example 8080): npx build/site l 8080 #tutorial #antora #docs",
    "description" : ""
  }]}

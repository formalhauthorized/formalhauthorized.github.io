



{"search" : [
  {
    "url" : "/sections/dev/posts/rust/start/",
    "title" : "start-rust",
    "text" : "start rust undefined this section about rust #start #begin #basics #rust",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/solana/basics/start/",
    "title" : "start-solana",
    "text" : "start solana undefined this section about solana basics #start #begin #basics #solana",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/solidity/basics/start/",
    "title" : "start-solidity",
    "text" : "start solidity undefined this section about solidity basics #solidity #start",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/rust/wasm-tutorial/",
    "title" : "wasm tutorial game of life",
    "text" : "wasm tutorial game life undefined this based tutorial: life game life wrapper { top: 0; left: width: 100%; height: display: flex; flex direction: column; align items: center; justify content: } import init { universe cell } from &#39; /wasm_game_of_lifejs&#39;; async function run() const cell_size = 5; // px grid_color &quot;#cccccc&quot;; dead_color &quot;#ffffff&quot;; alive_color &quot;#000000&quot;; await init(); memory wasmmemory; consolelog(wasm); // construct get its width height const universe universenew(); const universewidth(); const height universeheight(); const canvas documentgetelementbyid(&quot;game life canvas&quot;); canvasheight (cell_size + 1) * 1; canvaswidth 1; const ctx canvasgetcontext(&#39;2d&#39;) const getindex (row column) =&gt; return row column; }; drawgrid () ctxbeginpath(); ctxstrokestyle grid_color; vertical lines (let 0; &lt;= width; ++) ctxmoveto( 1 0); ctxlineto( 1); } horizontal j height; j++) ctxmoveto(0 ctxlineto((cell_size ctxstroke(); }; const drawcells cellsptr universecells(); cells new uint8array(memorybuffer cellsptr height); ctxbeginpath(); &lt; row++) col col++) idx getindex(row col); ctxfillstyle cells[idx] === celldead dead_color : alive_color; ctxfillrect( 1 cell_size cell_size ); } ctxstroke(); }; renderloop universetick(); drawgrid(); drawcells(); requestanimationframe(renderloop); }; drawgrid(); drawcells(); requestanimationframe(renderloop); run(); #rust #wasm #tutorial",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/docker/clear-cache/",
    "title" : "clear cache docker",
    "text" : "clear cache docker undefined storage from docker docker disk usage docker system df prune images docker image prune remove build cache docker buildx everything docker prune reference this post meant personal quick cheat sheet more detailed explanation examples: post #docker #cache",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/antora/quickstart/",
    "title" : "quick start antora",
    "text" : "quick start antora undefined environment ease setting using docker container good start dockerfile below example environment # syntax=docker/dockerfile:16 #################################################### ### args #################################################### arg variant=&quot;trixie&quot; #################################################### ### base #################################################### # [choice] debian version (use bullseye local arm64/apple silicon): bookworm bullseye buster from debian:${variant} base image run apt get update &amp;&amp; export debian_frontend=noninteractive &#92; y install install recommends curl ca certificates gnupg bash completion git jq python3 pip python3 venv sudo unzip wget vim tmux tree ssh rm rf /var/lib/apt/lists/* #################################################### ### user #################################################### from base image toolbox # add user with passwordless sudo arg username=dev run useradd m &quot;${username}&quot; usermod ag echo &quot;${username} all=(all) nopasswd: all&quot; &gt;&gt; /etc/sudoers ##### user level setup follows ##### things should installed $home from now user &quot;${username}&quot; workdir /home/&quot;${username}&quot; env home=&quot;/home/${username}&quot; env path=&quot;${path}:${home}/ local/bin&quot; # nvm # inspired by https://rawgithubusercontentcom/devcontainers/features/main/src/node/installsh run o https://rawgithubusercontentcom/nvm sh/nvm/v0401/installsh | bash env nvm_dir=&quot;${home}/ nvm&quot; # node get node version path global npm packages run &quot;$nvm_dir/nvmsh&quot; nvm lts alias default lts/* use node_version=$(node version) # &quot;path=&#92;&quot;${home}/ nvm/versions/node/$node_version/bin:${path}&#92;&quot;&quot; &quot;${home}/ bashrc&quot; omit=dev global force pnpm yarn g yarn ### antora: https://docsantoraorg/antora/latest/install run quickstart/ run 22 put code into build t run run p 3000:3000 antora_101 bash note port mapped 3000 3000 note that have ~/ nvm/nvmsh npm maybe put ~/ bashrc might idea reference detailed tutorial see references: antora docs make package mkdir docs site &amp;amp;&amp;amp; cd docs site node e &quot;fswritefilesync(&#39;packagejson&#39; &#39;{}&#39;)&quot; d antora npx v playbook source git initialize docs site git init git commit allow empty init putting some docs mkdir modules/root/pages modules/root/pages/indexadoc = welcome! are home modules/root/pages/new pageadoc = new page &#39;ve found page modules/root/navadoc * xref:new pageadoc[] antorayml name: project name version: ~ title: project name nav: modules/root/navadoc site: title: docs site start_page: project name::indexadoc content: sources: url: branches: head ui: bundle: https://gitlabcom/antora/antora ui default/ /jobs/artifacts/head/raw/build/ui bundlezip job=bundle stable snapshot: true build: npx antora playbookyml serve serve build/site following command default will 3000 can access your browser localhost:3000 npx build/site want specify ( example 8080): npx build/site l 8080 #tutorial #antora #docs",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/bitcoin/bitcoin-tutorial-regtest-101/",
    "title" : "bitcoin tutorial regtest 101",
    "text" : "bitcoin tutorial regtest 101 undefined 101 references this post personal note commands see more detailed explanation visit: blockchain commons from forum bitcoin cli config run with bitcoind regtest fallbackfee=000001 maxtxfee=01 fallbackfee maxtxfee setting will prevent fee estimation failed error modify ~/ bitcoin/bitcoinconf like below run bitcoindregtest=1 [regtest] fallbackfee=000001 maxtxfee=01 server=1 printtoconsole=1 state saved ~/ bitcoin/regtest directory start fresh regtest simply remove directory rm rf regtest set regtest=1 bitcoinconf need add argument bitcoin cli otherwise have use cli bitcoin cli wallet wallet needed generate blocks bitcoin cli named createwallet wallet_name=&quot;regtest_desc_wallet&quot; descriptors=true bitcoin cli &amp;lt;wallet name&gt; bitcoin cli loadwallet unloadwallet bitcoin cli getnewaddress &amp;lt;label&gt; &amp;lt;address_type(optional)&gt; bitcoin cli // bech32 address starting &quot;bcrt&quot; bitcoin cli &quot;&quot; legacy bitcoin cli &quot;segwit address&quot; p2sh segwit generate blocks note that block must 100 confirmations before reward can spent before balance show rewards also difference rewards curve mainnet bitcoin cli generate mine blocks &gt; from first spent bitcoin cli getbalance rewards: 50 bitcoin cli generagtetoaddress &amp;lt;number_of_blocks&gt; &amp;lt;address&gt; use regtest transactions $ sendtoaddress [address] [amount_to_send] output transaction hash which verified using gettransaction bitcoin cli gettransaction &amp;lt;tx_hash&gt; finalize create blocks bitcoin cli 6 get info // list groups addresses &gt; listaddressgroupings &gt; curl user myusername data binary &#39;{&quot;jsonrpc&quot;: &quot;20&quot; &quot;id&quot;: &quot;curltest&quot; &quot;method&quot;: &quot;listaddressgroupings&quot; &quot;params&quot;: []}&#39; h &#39;content type: application/json&#39; http://127001:8332/ // unspent output &gt; listunspent ( minconf maxconf [&quot;address&quot; ] include_unsafe query_options ) &gt; 1 99999999 &#39;[&quot;&amp;lt;address&gt;&quot;]&#39; &gt; 0 999 &#39;[&quot;mzyiwrixmsm345pzccftpdf7g1oikhtadr&quot;]&#39; [ { &quot;txid&quot;: &quot;69b4225a051b568235b77437ae7ad23218408d6cb1642432448aef1a7e3140c6&quot; &quot;vout&quot;: 0 &quot;address&quot;: &quot;mzyiwrixmsm345pzccftpdf7g1oikhtadr&quot; &quot;scriptpubkey&quot;: &quot;76a914d0bfb83011526250ed98932e7897b64eb81bba8988ac&quot; &quot;amount&quot;: 4999974420 &quot;confirmations&quot;: &quot;ancestorcount&quot;: 1 &quot;ancestorsize&quot;: 214 &quot;ancestorfees&quot;: 25680 &quot;spendable&quot;: true &quot;solvable&quot;: &quot;desc&quot;: &quot;pkh([13a51323/44h/1h/0h/1/0]024d13433f5041bde148aa0cfa189998888b4a288f7043f9e9914979ed8d4e15b2)#c0m49aj9&quot; &quot;parent_descs&quot;: [ &quot;pkh(tpubd6nzvbkryhz4yuarxuoamsdeclqfj4l7gh2xs6tuokhauhubzpuzvy4e9f9u692nl1hjtgpuenm226qcgaq2qstqaazczkhnodhnfyxqkfq/44h/1h/0h/1/*)#mc624kv5&quot; ] &quot;safe&quot;: true } ] get information chain &gt; getblockcount // blockhash given height &gt; getblockhash &amp;lt;height&gt; &amp;lt;hex str: hash&gt; // blockhash &gt; getblock &amp;lt;blockhash&gt; // provide verbosity 0123 &gt; &amp;lt;blockhash&gt; serialized hex encoded data &gt; 2 also includes info each tx block &gt; &amp;lt;hash&gt; | jq &#39; tx&#39; transactions block // mempool &gt; getrawmempool &gt; getmempoolentray &quot;&amp;lt;txid&gt;&quot; // transaction // output // n vout &gt; gettxout &quot;&amp;lt;txid&gt;&quot; include_mempool &quot;dd93bf97f5ce9440b9b7cf3478f6cedf08f71873bd045e8edd6f1621c1e0a6c6&quot; false &gt; getrawtransaction &quot;&amp;lt;txid&gt;&quot; &gt; decoderawtransaction &quot;&amp;lt;hexstring&gt;&quot; &gt; &quot;020000000001029b27500d70467a948ce3b9f2c4f6b2c19c4188171c3e48f5c2c9636d9c9a33f10000000000fdffffff5964234e3e38aec8f279553f85fd300b6c8c8ce7acbdfc2a21071bf3497741a60000000000fdffffff029cf1052a010000001976a91462e907b15cbf27d5425399ebf6f0fb50ebb88f1888ac148e052a010000001976a9145ba027e147eeb2e4376aa3d7561e95688890621f88ac02473044022050cb2865770c2c336920574382a5d0d4b4d957fbf8da135ae4817d9677e9a5b802205646ad779e23cf0b08c1ce718519f29a53258f0a2068a08dad04f460e106ddfb0121025f8e8daa3d781e8437cc7a4524425e97e855c4fee58e3b1709dcb6f94a23fe7c024730440220280940a11e3f0d2400a77dd8bda76475f5641a739685d281082d604107c38cfa02204f0c7bc1bfad014150ff4d8af533d09055cc17141783c6069ebd01de1eddbc3d0121025f8e8daa3d781e8437cc7a4524425e97e855c4fee58e3b1709dcb6f94a23fe7c00000000&quot; &gt; &quot;$(bitcoin cli &amp;lt;txid&gt;)&quot; &gt; f1339a9c6d63c9c2f5483e1c1788419cc1b2f6c4f2b9e38c947a46700d50279b)&quot; &gt; &amp;lt;txid&gt;)&quot; &quot; vout[&amp;lt;vout&gt;] value&quot; &gt; listaddressgroupings create raw transaction send following steps: create transaction specify outputs want spend specify destination amount ( left over miners) sign transaction send signed this return &amp;lt;hex&gt; &gt; createrawtransaction &gt; createrawtransaction [{&quot;txid&quot;:&quot;hex&quot; &quot;vout&quot;:n &quot;sequence&quot;:n} ] [{&quot;address&quot;:amount } {&quot;data&quot;:&quot;hex&quot;} ] locktime replaceable &#92; &#39;[{&quot;txid&quot;:&quot;&amp;lt;txid&gt;&quot; &quot;vout&quot;:&amp;lt;vout&gt;}]&#39; &#39;{&quot;&amp;lt;dest_address&gt;&quot;: &amp;lt;amount&gt;}&#39; // sign // spend received by created `getnewaddress` current wallet // without trouble below &gt; signrawtransactionwithwallet &amp;lt;hex&gt; // transaction // &amp;lt;txid&gt; &gt; sendrawtransaction check transaction &gt; &amp;lt;txid&gt; true &gt; getmempoolentry &amp;lt;txid&gt; example all addresses numbers are just test purpose local environment &gt; &quot;alice&quot; bcrt1q506xg3axjjxhmpjn9ucptlr0yz406axwhg0ffn &gt; &quot;bob&quot; bcrt1quw87r2w69w2ya7mss9l9hpd7vmjd7nc48sujqk &gt; getaddressesbylabel &quot;alice&quot; { &quot;bcrt1q506xg3axjjxhmpjn9ucptlr0yz406axwhg0ffn&quot;: &quot;purpose&quot;: &quot;receive&quot; } } &gt; getaddressinfo &quot;bcrt1q506xg3axjjxhmpjn9ucptlr0yz406axwhg0ffn&quot; &gt; &quot;bcrt1q506xg3axjjxhmpjn9ucptlr0yz406axwhg0ffn&quot; 10 &quot;initial_fund&quot; &gt; 6 // shows label alice (also comments &quot;initial_fund&quot; above) &gt; listtransactions &quot;alice&quot; // address &gt; &#39;[&quot;bcrt1q506xg3axjjxhmpjn9ucptlr0yz406axwhg0ffn&quot;]&#39; [ &quot;3c39045655b1352919a3e7005bffcd41d150c5933db4ba581b54f03d7b859fb8&quot; &quot;bcrt1q506xg3axjjxhmpjn9ucptlr0yz406axwhg0ffn&quot; &quot;label&quot;: &quot;alice&quot; &quot;0014a3f46447a6948d7d86532f3015fc6f20aafd74ce&quot; 2000000000 6 &quot;wpkh([13a51323/84h/1h/0h/0/2]02c466916546634e38bb7f6ef697f54c3658c96bddb49d93c24dfbc5ffd4eff21b)#fnwf03xr&quot; &quot;wpkh(tpubd6nzvbkryhz4yuarxuoamsdeclqfj4l7gh2xs6tuokhauhubzpuzvy4e9f9u692nl1hjtgpuenm226qcgaq2qstqaazczkhnodhnfyxqkfq/84h/1h/0h/0/*)#4w6qzw3f&quot; } &quot;0b8816c2a76d0ea439b430bfc9f9f170d757359b01fe94fbad1923dbc0779092&quot; 100000000 12 } ] // let&#39;s 100000 bob // 01 &gt; &#39;[{&quot;txid&quot;:&quot;0b8816c2a76d0ea439b430bfc9f9f170d757359b01fe94fbad1923dbc0779092&quot; &quot;vout&quot;:1}]&#39; &#39;{&quot;bcrt1quw87r2w69w2ya7mss9l9hpd7vmjd7nc48sujqk&quot;: 099}&#39; 0200000001929077c0db2319adfb94fe019b3557d770f1f9c9bf30b439a40e6da7c216880b0100000000fdffffff01c09ee60500000000160014e38fe1a9da2b944efb70817e5b85be66e4df4f1500000000 &gt; 0200000001929077c0db2319adfb94fe019b3557d770f1f9c9bf30b439a40e6da7c216880b0100000000fdffffff01c09ee60500000000160014e38fe1a9da2b944efb70817e5b85be66e4df4f1500000000 { &quot;hex&quot;: &quot;02000000000101929077c0db2319adfb94fe019b3557d770f1f9c9bf30b439a40e6da7c216880b0100000000fdffffff01c09ee60500000000160014e38fe1a9da2b944efb70817e5b85be66e4df4f150247304402207384925e91eb6ae28d932863035cb7b2e7232e3426026b1ffca761235c4be99f02206c66c0672da20736ec6b5a021a0afcba7bcf13721b86b153b3727db4923e6573012102c466916546634e38bb7f6ef697f54c3658c96bddb49d93c24dfbc5ffd4eff21b00000000&quot; &quot;complete&quot;: true } &gt; 02000000000101929077c0db2319adfb94fe019b3557d770f1f9c9bf30b439a40e6da7c216880b0100000000fdffffff01c09ee60500000000160014e38fe1a9da2b944efb70817e5b85be66e4df4f150247304402207384925e91eb6ae28d932863035cb7b2e7232e3426026b1ffca761235c4be99f02206c66c0672da20736ec6b5a021a0afcba7bcf13721b86b153b3727db4923e6573012102c466916546634e38bb7f6ef697f54c3658c96bddb49d93c24dfbc5ffd4eff21b00000000 80ce6b52c869f2061b496bead021db3bedf4e8afd52326e187d47e2d8939d5f9 &gt; 80ce6b52c869f2061b496bead021db3bedf4e8afd52326e187d47e2d8939d5f9 { 000000000 &quot;fee&quot;: 001000000 &quot;trusted&quot;: &quot;80ce6b52c869f2061b496bead021db3bedf4e8afd52326e187d47e2d8939d5f9&quot; &quot;wtxid&quot;: &quot;2514d522d7d476dc6e1def28567a9cd59aad255e4c8270dc18c232cc56885eb1&quot; &quot;walletconflicts&quot;: &quot;mempoolconflicts&quot;: &quot;time&quot;: 1754575249 &quot;timereceived&quot;: &quot;bip125 replaceable&quot;: &quot;yes&quot; &quot;details&quot;: &quot;bcrt1quw87r2w69w2ya7mss9l9hpd7vmjd7nc48sujqk&quot; &quot;category&quot;: &quot;send&quot; 099000000 &quot;bob&quot; &quot;abandoned&quot;: false &quot;wpkh(tpubd6nzvbkryhz4yuarxuoamsdeclqfj4l7gh2xs6tuokhauhubzpuzvy4e9f9u692nl1hjtgpuenm226qcgaq2qstqaazczkhnodhnfyxqkfq/84h/1h/0h/0/*)#4w6 qzw3f&quot; &quot;receive&quot; 099000000 } &quot;02000000000101929077c0db2319adfb94fe019b3557d770f1f9c9bf30b439a40e6da7c216880b0100000000fdffffff01c09ee60500000000160014e38fe1a9da2b94 4efb70817e5b85be66e4df4f150247304402207384925e91eb6ae28d932863035cb7b2e7232e3426026b1ffca761235c4be99f02206c66c0672da20736ec6b5a021a0afcba7bcf13 721b86b153b3727db4923e6573012102c466916546634e38bb7f6ef697f54c3658c96bddb49d93c24dfbc5ffd4eff21b00000000&quot; &quot;lastprocessedblock&quot;: &quot;hash&quot;: &quot;6cb3a3b60509dfda610868eee3b36211afb44ffad4d70a3368e32c779fbf7bf4&quot; &quot;height&quot;: 169 80ce6b52c869f2061b496bead021db3bedf4e8afd52326e187d47e2d8939d5f9 true { &quot;2514d522d7d476dc6e1def28567a9cd59aad255e4c8270dc18c232cc56885eb1&quot; &quot;version&quot;: 2 &quot;size&quot;: 191 &quot;vsize&quot;: 110 &quot;weight&quot;: 437 &quot;locktime&quot;: &quot;vin&quot;: &quot;scriptsig&quot;: &quot;asm&quot;: &quot;&quot; &quot;&quot; &quot;txinwitness&quot;: &quot;304402207384925e91eb6ae28d932863035cb7b2e7232e3426026b1ffca761235c4be99f02206c66c0672da20736ec6b5a021a0afcba7bcf13721b86b153b3727db4923e657301&quot; &quot;02c466916546634e38bb7f6ef697f54c3658c96bddb49d93c24dfbc5ffd4eff21b&quot; &quot;sequence&quot;: 4294967293 &quot;value&quot;: &quot;n&quot;: &quot;0 e38fe1a9da2b944efb70817e5b85be66e4df4f15&quot; &quot;addr(bcrt1quw87r2w69w2ya7mss9l9hpd7vmjd7nc48sujqk)#q3nu0ldk&quot; &quot;0014e38fe1a9da2b944efb70817e5b85be66e4df4f15&quot; &quot;type&quot;: &quot;witness_v0_keyhash&quot; &quot;02000000000101929077c0db2319adfb94fe019b3557d770f1f9c9bf30b439a40e6da7c216880b0100000000fdffffff01c09ee60500000000160014e38fe1a9da2b944efb70817e5b85be66e4df4f150247304402207384925e91eb6ae28d932863035cb7b2e7232e3426026b1ffca761235c4be99f02206c66c0672da20736ec6b5a021a0afcba7bcf13721b86b153b3727db4923e6573012102c466916546634e38bb7f6ef697f54c3658c96bddb49d93c24dfbc5ffd4eff21b00000000&quot; } // mined seen 169 &quot;descendantcount&quot;: &quot;descendantsize&quot;: &quot;fees&quot;: &quot;base&quot;: 001000000 &quot;modified&quot;: &quot;ancestor&quot;: &quot;descendant&quot;: 001000000 &quot;depends&quot;: &quot;spentby&quot;: &quot;unbroadcast&quot;: true } // one now bob&#39;s &#39;[&quot;bcrt1quw87r2w69w2ya7mss9l9hpd7vmjd7nc48sujqk&quot;]&#39; [ &quot;wpkh([13a51323/84h/1h/0h/0/5]027eb3afa366c940ae009f548d154c445b6b86decb1179e8122f5c39e5ba64f0dc)#zr6t08qf&quot; } ] using curl using rpc endpoints such alchemy example $ &quot;getblockcount&quot; https://bitcoin mainnetgalchemycom/v2/&amp;lt;api key&gt; {&quot;jsonrpc&quot;:&quot;20&quot; &quot;result&quot;:909021 &quot;id&quot;:&quot;curltest&quot;} using python script find scripts interact here install bitcoinrpc package (venv) uv venv source venv/bin/activate uv pip install python bitcoinrpc uv simplejson infopy (part4) #bitcoin #tutorial #regtest",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/bitcoin/example_transaction_bytemap/",
    "title" : "bitcoin example transaction bytemap",
    "text" : "bitcoin example transaction bytemap undefined below taken from book mastering bitcoin transaction can get transaction&#39;s raw hex with bitcoin cli getrawtransaction 466200308696215bbc949d5141a49a4138ecdfdfaa2a8029c1f9bcecd1f96177 which will return 01000000000101eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da13569 8679268041c54a0100000000ffffffff02204e0000000000002251203b41daba 4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068f8240100 000000001600147752c165ea7be772b2c0acb7f4d6047ae6f4768e0141cf5efe 2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51b e739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e81713010000 0000 one decode decoderawtransaction parse per schema below: version : 01000000 marker 00 flag 01 inputs 01eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da135698679268041c54a0100000000ffffffff outputs 02204e0000000000002251203b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068f8240100000000001600147752c165ea7be772b2c0acb7f4d6047ae6f4768e witness 0141cf5efe2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51be739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e8171301 locktime 00000000 inputs let&#39;s look closely into inputs input data 01eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da135698679268041c54a0100000000ffffffff : count 01 prev output txid: eb3ae38f27191aa5f3850dc9cad00492b88b72404f9da135698679268041c54a flip_bytes &amp;gt; 4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19278fe33aeb prev ind 01000000 00000001 check 01th vout fetched using txid length 00 sequence ffffffff note that prev txid index are flipped due difference endianness below queried txid give data parse &gt; 4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19278fe33aeb &quot;02000000000101c25ae90c9f3d40cc1fc509ecfd54b06e354507022501ae541d7f263ca64e26e60000000000fdffffff02bede150100000000160014ad71af3345e83fb646fb72a3ae39e495d46624b0a086010000000000225120225d4d0b946400fe7f85b117d821d533a7b8e490fff4b4b4476950bbacbeb79602473044022041e0ca9a17c816ddd8c31e306f0a76cb10b39399c4878d3d0c47b421e5ebac9a022009780fe8be8cc2d1959ae431d3d81db52288354d27e829b0eee35b51cc13ff59012102d733517ce9a8be7953d2b566f5fa12f56951c957bc9f218f1b4cb41468ea7b872dd30b00&quot; use manually : # ver 02000000 # marker flag 0001 # count 01 # txid c25ae90c9f3d40cc1fc509ecfd54b06e354507022501ae541d7f263ca64e26e6 e6264ea63c267f1d54ae0125020745356eb054fdec09c51fcc403d9f0ce95ac2 # index 00000000 # script length 00 # sequence fdffffff # count 02 # 0 amount bede150100000000 18210494 sat # length 16 # script 0014ad71af3345e83fb646fb72a3ae39e495d46624b0 # 1 amount &amp;gt; ** spent** a086010000000000 100000 length 22 # outputscript 5120225d4d0b946400fe7f85b117d821d533a7b8e490fff4b4b4476950bbacbeb796 # witness 02 // witness count 47 71 length 3044022041e0ca9a17c816ddd8c31e306f0a76cb10b39399c4878d3d0c47b421e5ebac9a022009780fe8be8cc2d1959ae431d3d81db52288354d27e829b0eee35b51cc13ff5901 21 33 length 02d733517ce9a8be7953d2b566f5fa12f56951c957bc9f218f1b4cb41468ea7b87 2dd30b00 `decoderawtransaction` result: { &amp;quot;txid&amp;quot;: &amp;quot;4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19278fe33aeb&amp;quot; &amp;quot;hash&amp;quot;: &amp;quot;1755e30dce1adc087950f8432fa665a5eb12cc4b289b2b330f987562aedeccd8&amp;quot; &amp;quot;version&amp;quot;: 2 &amp;quot;size&amp;quot;: 234 &amp;quot;vsize&amp;quot;: 153 &amp;quot;weight&amp;quot;: 609 &amp;quot;locktime&amp;quot;: 774957 &amp;quot;vin&amp;quot;: [ { &amp;quot;e6264ea63c267f1d54ae0125020745356eb054fdec09c51fcc403d9f0ce95ac2&amp;quot; &amp;quot;vout&amp;quot;: 0 &amp;quot;scriptsig&amp;quot;: &amp;quot;asm&amp;quot;: &amp;quot;&amp;quot; &amp;quot;hex&amp;quot;: &amp;quot;&amp;quot; } &amp;quot;txinwitness&amp;quot;: &amp;quot;3044022041e0ca9a17c816ddd8c31e306f0a76cb10b39399c4878d3d0c47b421e5ebac9a022009780fe8be8cc2d1959ae431d3d81db52288354d27e829b0eee35b51cc13ff5901&amp;quot; &amp;quot;02d733517ce9a8be7953d2b566f5fa12f56951c957bc9f218f1b4cb41468ea7b87&amp;quot; ] &amp;quot;sequence&amp;quot;: 4294967293 } &amp;quot;value&amp;quot;: 018210494 &amp;quot;n&amp;quot;: &amp;quot;scriptpubkey&amp;quot;: &amp;quot;0 ad71af3345e83fb646fb72a3ae39e495d46624b0&amp;quot; &amp;quot;desc&amp;quot;: &amp;quot;addr(bcrt1q44c67v69aqlmv3hmw236uw0yjh2xvf9sc039c6)#35us5lam&amp;quot; &amp;quot;0014ad71af3345e83fb646fb72a3ae39e495d46624b0&amp;quot; &amp;quot;address&amp;quot;: &amp;quot;bcrt1q44c67v69aqlmv3hmw236uw0yjh2xvf9sc039c6&amp;quot; &amp;quot;type&amp;quot;: &amp;quot;witness_v0_keyhash&amp;quot; 000100000 1 &amp;quot;1 225d4d0b946400fe7f85b117d821d533a7b8e490fff4b4b4476950bbacbeb796&amp;quot; &amp;quot;rawtr(225d4d0b946400fe7f85b117d821d533a7b8e490fff4b4b4476950bbacbeb796)#6hn48a2d&amp;quot; &amp;quot;5120225d4d0b946400fe7f85b117d821d533a7b8e490fff4b4b4476950bbacbeb796&amp;quot; &amp;quot;bcrt1pyfw56zu5vsq0ulu9kytasgw4xwnm3eysll6tfdz8d9gtht97k7tqup7hgx&amp;quot; &amp;quot;witness_v1_taproot&amp;quot; ] } from original transaction know 1th spent (from tx decoded tx) this sat also : 5120225d4d0b946400fe7f85b117d821d533a7b8e490fff4b4b4476950bbacbeb796 outputs let&#39;s data outputs 02204e0000000000002251203b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068f8240100000000001600147752c165ea7be772b2c0acb7f4d6047ae6f4768e here also 02 compactsize integer amount 204e000000000000 &gt; 0000000000004e20 hex2dec 20000 length 22 integer 34 output 51203b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068 34 bytes amount f824010000000000 flip dec 75000 lenght 16 22 outputscript 00147752c165ea7be772b2c0acb7f4d6047ae6f4768e bytes ### structure witness 0141cf5efe2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51be739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e8171301 count 01 size 41 65 witness item cf5efe2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51be739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e8171301 there 2 outputs first one 20000 sat second 75000 vin had sat left over go miner fee scripts here shell scripts might useful byte orders: #!/bin/sh # flip_bytessh reverse order string hex=&quot;$1&quot; echo &quot;$hex&quot; | fold w2 tac tr d &quot;&#92;n&quot; echo convert string decimal #!/bin/sh # hex_to_decsh decimal hex=&quot;$1&quot; printf &quot;%d&#92;n&quot; &quot;0x$hex&quot; decoded transaction actually could just bitcoin cli result below: { &quot;txid&quot;: &quot;466200308696215bbc949d5141a49a4138ecdfdfaa2a8029c1f9bcecd1f96177&quot; &quot;hash&quot;: &quot;f7cdbc7cf8b910d35cc69962e791138624e4eae7901010a6da4c02e7d238cdac&quot; &quot;version&quot;: &quot;size&quot;: 194 &quot;vsize&quot;: 143 &quot;weight&quot;: 569 &quot;locktime&quot;: &quot;vin&quot;: &quot;4ac541802679866935a19d4f40728bb89204d0cac90d85f3a51a19278fe33aeb&quot; &quot;vout&quot;: &quot;scriptsig&quot;: &quot;asm&quot;: &quot;&quot; &quot;hex&quot;: &quot;&quot; &quot;txinwitness&quot;: &quot;cf5efe2d8ef13ed0af21d4f4cb82422d6252d70324f6f4576b727b7d918e521c00b51be739df2f899c49dc267c0ad280aca6dab0d2fa2b42a45182fc83e8171301&quot; &quot;sequence&quot;: 4294967295 &quot;value&quot;: 000020000 &quot;n&quot;: &quot;scriptpubkey&quot;: &quot;1 3b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068&quot; &quot;desc&quot;: &quot;rawtr(3b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068)#38d6v6ev&quot; &quot;51203b41daba4c9ace578369740f15e5ec880c28279ee7f51b07dca69c7061e07068&quot; &quot;address&quot;: &quot;bcrt1p8dqa4wjvnt890qmfws83te0v3qxzsfu7ul63kp7u56w8qc0qwp5qk5ea0x&quot; &quot;type&quot;: &quot;witness_v1_taproot&quot; 000075000 &quot;0 7752c165ea7be772b2c0acb7f4d6047ae6f4768e&quot; &quot;addr(bcrt1qwafvze0200nh9vkq4jmlf4sy0tn0ga5w8drgdj)#xteglg5j&quot; &quot;00147752c165ea7be772b2c0acb7f4d6047ae6f4768e&quot; &quot;bcrt1qwafvze0200nh9vkq4jmlf4sy0tn0ga5w8drgdj&quot; &quot;witness_v0_keyhash&quot; ] } #bitcoin #example #transaction #bytemap",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/solana/basics/how-to-sysvar-accounts/",
    "title" : "how to get Sysvar in a Solana program",
    "text" : "how get sysvar solana program undefined program getting from accountinfo fn process_sysvar(accounts: &amp;amp;[accountinfo]) &gt; programresult { let account_info_iter = &amp;amp;mut accountsiter(); // let&#39;s say first accounts clock clock_info next_account_info(account_info_iter) ; clock &amp;amp;clock::from_account_info(clock_info) ; now can use clock like clockepoch } what happens internally method clock::from_account_info uses trait: source: clock source: sysvar fn from_account_info(account_info: &amp;amp;accountinfo) result&amp;lt;self programerror&gt; !self::check_id(account_infounsigned_key()) return err(programerror::invalidargument); } bincode::deserialize(&amp;amp;account_infodataborrow()) map_err(|_| programerror::invalidargument) } what checked: id check check_id() validates that passed account_infokey matches hardcoded pubkey expected (eg sysvarclock11111111111111111111111111111111) declared via declare_id! macro deserialization id matches account data deserialized using bincode into struct (eg clock) preferred: get() method instead requiring accounts built method: let clock::get() ; this approach cleaner avoids needing explicitly by caller how sysvar::get() works here example implementation source: impl impl_sysvar_get!(sol_get_clock_sysvar); } macro impl_sysvar_get with syscall sol_get_clock_sysvar defined here: #[macro_export] macro_rules! ($syscall_name:ident) =&gt; mut var self::default(); var_addr *mut _ u8; #[cfg(target_os &quot;solana&quot;)] result unsafe { $crate::syscalls::$syscall_name(var_addr) }; #[cfg((target_os &quot;solana&quot;))] $crate::program_stubs::$syscall_name(var_addr); match $crate::entrypoint::success ok(var) e err(einto()) }; } syscall_name case sol_get_clock_sysvar given called chain here step by step clock::get(): self::default() creates uninitialized struct raw pointer memory populates place current chain sysvar now initialized instance (var) returned note every fetched get though supported will error version: solana program 230 #solana #sysvar",
    "description" : ""
  },
  {
    "url" : "/sections/dev/posts/misc/ssh-setting/",
    "title" : "setting ssh",
    "text" : "setting ssh undefined ssh here are commands configs ssh everying here really tested took things from among other posts forgot note [mac] list sshd launchctl | grep ssh launchctl print system/comopensshsshd launchctl system/comopensshssh agent [mac] turn ssh sharing settings remote login can see command login also set who allowed remotely login generate keypair generate key pair ( client): # (client) ssh keygen t ed25519 c &quot;your_email@examplecom&quot; ssh keygen &quot;&amp;lt;comment&gt;&quot; f ~/ ssh/somethingsomething now copy public server: ssh copy id &amp;lt;username&gt;@&amp;lt;server_ip_address&gt; ssh copy id ~/ ssh/&amp;lt;your_key&gt; pub p &amp;lt;port&gt; &amp;lt;username&gt;@&amp;lt;server ip&gt; ssh copy id &quot; o port=&amp;lt;port&gt;&quot; ip&gt; configure now with key login your computer here some configuration might want consider disable password based logins server by default using password which good especially when password short open /etc/ssh/sshd_config file search : #passwordauthentication yes update this : passwordauthentication kdbinteractiveauthentication disable server root login open file: #permitrootlogin prohibit password update permitrootlogin ssh config timeout limits somehow one did work machine #clientaliveinterval 0 #clientalivecountmax 3 #maxstartups 10:30:100 #maxsessions 10 clientaliveinterval 1000 clientalivecountmax 3 maxstartups 5:30:100 maxsessions 2 #linux #macos #ssh #setting #config",
    "description" : ""
  }]}
